{"version":3,"sources":["run.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;uEAKO,iBAAmB,IAAnB,EAAyB,GAAzB;QACD,QACA,MAOE,MACA,OAEK,GACH,MAIF,IAUA,SAaF;;;;;;AAvCA,qBAAS,IAAI,QAAQ,MAAR,CAAe,QAAQ,WAAR,EAAqB,QAAQ,WAAR;AACjD;;;AAGF,mBAAO,OAAO,IAAP,CAAY,IAAZ,EAAkB,OAAlB;;;;;;;;;;AAIH,mBAAO;AACP,oBAAQ,KAAK,KAAL,CAAW,IAAX;;AACZ,kBAAM,OAAN,CAAc,EAAd;AACA,iBAAS,IAAI,CAAb,EAAgB,IAAI,YAAE,MAAF,EAAU,GAA9B,EAAmC;AAC7B,qBAAO,KAAK,CAAL,EADsB;;AAEjC,kBAAI,QAAQ,IAAR,EAAc,OAAlB;aAFF;;AAKI,iBAAK,MAAM,IAAN;;;AAET,gBAAI,OAAO,CAAP,GAAW,CAAX,EAAc,QAAQ,GAAR,CAAY,MAAM,IAAN,CAAW,OAAO,CAAP,CAAvB,EAAkC,MAAM,OAAO,CAAP,CAAxC,EAAlB;AACA,gBAAI,IAAJ,EAAU,QAAQ,GAAR,CAAY,MAAM,IAAN,CAAW,IAAX,CAAZ,EAA8B,MAAM,GAAN,CAAU,EAAV,CAA9B,EAAV;AACA,gBAAI,OAAO,CAAP,GAAW,MAAM,MAAN,EAAc,QAAQ,GAAR,CAAY,MAAM,IAAN,CAAW,OAAO,CAAP,CAAvB,EAAkC,MAAM,OAAO,CAAP,CAAxC,EAA7B;kBACM,IAAI,KAAJ,CAAU,MAAM,GAAN,wBAA+B,MAAM,IAAN,WAAmB,IAAnB,OAA/B,CAAV;;;;AAGR,gBAAI,KAAK,MAAL,GAAc,CAAd,EAAiB;AACnB,sBAAQ,IAAR,CAAa,MAAM,GAAN,CAAU,IAAV,CAAe,wBAAf,CAAb,EADmB;AAEf,wBAAS,OAAO,YAAP,CAAoB,EAApB,EAFM;;AAGnB,mBAAK,OAAL,CAAa,UAAS,GAAT,EAAc,CAAd,EAAiB;AAC5B,wBAAQ,IAAR,CAAa,yBAAe,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAb,EAD4B;AAE5B,wBAAQ,IAAR,CAAa,kCAAb,EAF4B;eAAjB,CAAb,GAIA,QAAQ,IAAR,CAAa,MAAM,MAAN,mBACJ,MAAM,IAAN,CAAW,KAAK,MAAL,+IADP,CAAb,CAJA,CAHmB;aAArB;;;mBAemB,OAAO,MAAP,CAAc,KAAK,CAAL,CAAd,EAAuB,GAAvB;;;AAAf;6CACG;;;;;;;;GAzCF;kBAAe;;;;;;;AALtB,IAAM,UAAU,QAAQ,SAAR,CAAV;AACN,IAAM,UAAU,QAAQ,WAAR,CAAV;AACN,IAAM,SAAS,QAAQ,UAAR,CAAT;AACN,IAAM,QAAQ,QAAQ,OAAR,CAAR","file":"run.js","sourcesContent":["const nearley = require('nearley')\nconst grammar = require('./grammar')\nconst interp = require('./interp')\nconst chalk = require('chalk')\n\nexport async function run(code, dir) {\n  let parser = new nearley.Parser(grammar.ParserRules, grammar.ParserStart)\n  let asts\n\n  try {\n    asts = parser.feed(code).results\n  } catch (e) {\n    // there's been a syntax error :(\n\n    let line = 1\n    let lines = code.split('\\n')\n    lines.unshift('')\n    for (let i = 0; i < e.offset; i++) {\n      let char = code[i]\n      if (char == '\\n') line++\n    }\n\n    let ln = lines[line]\n\n    if (line - 1 > 0) console.log(chalk.bold(line - 1), lines[line - 1])\n    if (line) console.log(chalk.bold(line), chalk.red(ln))\n    if (line + 1 < lines.length) console.log(chalk.bold(line + 1), lines[line + 1])\n    throw new Error(chalk.red(`\\nSyntax Error at ${chalk.cyan(`line ${line}`)}!`))\n  }\n\n  if (asts.length > 1) {\n    console.warn(chalk.red.bold('!! AMBIGUOUS SYNTAX !!'))\n    let escape = String.fromCharCode(27)\n    asts.forEach(function(ast, i) {\n      console.warn(JSON.stringify(ast, null, 0))\n      console.warn('\\n----------------------------\\n')\n    })-\n    console.warn(chalk.yellow(`\nA total of ${chalk.cyan(asts.length)} ASTs were generated.\nPlease report this on the official issue tracker:\nhttps://github.com/liam4/tlnccuwagnf/issues\nUsing first AST.\n`))\n  }\n\n  let result = await interp.interp(asts[0], dir)\n  return result\n}\n"],"sourceRoot":"/source/"}