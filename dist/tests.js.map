{"version":3,"sources":["tests.js"],"names":[],"mappings":"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","file":"tests.js","sourcesContent":["'use strict'\n\nconst equal = require('deep-equal')\nconst chalk = require('chalk')\nconst run = require('../req.js')\nconst oldLog = console.log\n\nlet passed = 0\nlet tests = 0\n\nconst area = function(title) {\n  console.log('\\n   ' + chalk.bold(title) + ' ' + '-'.repeat(30 - title.length))\n}\n\nconst test = function(code, assume, title) {\n  title = (title || code).toLowerCase()\n  tests++\n  const out = []\n  console.log = function(...args) {\n    out.push(args)\n  }\n  chalk.enabled = false\n  const promise = run(code, __dirname, true)\n  promise.then(function() {\n    chalk.enabled = true\n    console.log = oldLog\n    if (!assume(out)) {\n      oldLog(chalk.red(' ✗ ' + (title)))\n      oldLog(out)\n    } else {\n      passed++\n      oldLog(chalk.green(' ✓ ' + (title)))\n    }\n  })\n  return promise\n}\n\nconst checkOut = function(compare) {\n  // this should be called like this:\n  // test(code, checkOut`compareThis`)\n  // or like this:\n  // test(code, checkOut(compareThese))\n\n  return function(result) {\n    return equal(result[0], compare)\n  }\n}\n\nconsole.time('Total tests time');\n// semicolon so that it doesn't think console.time(...)(async function...)\n\n(async function() {\n  try {\n    area('Print')\n    // Test print output\n    await test(`print(\"hello!\");`, checkOut`hello!`, 'basic usage')\n    // Test print with multiple arguments\n    await test(`print(\"hello\", \"world\");`, checkOut([`hello`, `world`]), 'Multiple Arguments')\n    await test(`print({}, 123.456);`, checkOut([`function`, `123.456`]), 'Types')\n\n    /* Commented this out. It works because of this grammar definition:\n     * _Program -> ...\n     *           | ...\n     *           | Command\n     * So a program can be a single command -- that's why this works.\n     */\n    /*\n    try {\n      // WHY IS THIS WORKING!?!?!?!?!?!??\n      test('print(\"hello! this should not work!\")\\n', checkOut`hello! this should not work!`)\n    } catch (err) {\n      console.log('Newline as separator doesn\\'t work, but it hasn\\'t been' +\n                  'implemented yet so that\\'s okay.')\n    }\n    */\n    // Test single quoted string\n    area('Strings')\n    await test(`print('single quoted');`, checkOut`single quoted`, 'Single Quotes')\n    await test(`print(concat(\"foo\", \"bar\"));`, checkOut`foobar`, 'Double Quotes')\n\n    area('String Escapes')\n    await test(`print('single quoted \\\\'escape');`, checkOut`single quoted 'escape`, 'Single Quotes')\n    await test(`print(\"double quoted \\\\\"escape\");`, checkOut`double quoted \"escape`, 'Double Quotes')\n    await test(`print('newline\\\\\\nescape');`, checkOut`newline\\nescape`, 'Newline')\n    await test(`print('escape \\\\\\\\escape');`, checkOut`escape \\\\escape`, 'Backslash')\n    await test(`print('\\\\'single\\\\' and \\\\\"double\\\\\"')`, checkOut`'single' and \"double\"`, 'Single & Double Quotes')\n\n    area('Math')\n    // Test basic math operator functions\n    await test(`print(+(3, 4));`, checkOut`7`, '+ add')\n    await test(`print(-(3, 4));`, checkOut`-1`, '- subtract')\n    await test(`print(*(3, 4));`, checkOut`12`, '* multiply')\n    await test(`print(/(3, 4));`, checkOut`0.75`, '/ divide')\n    // Test decimals\n    await test(`print(+(1.25, 1.755));`, checkOut`3.005`, '  decimals')\n\n    area('Conditionals')\n    // Test basic if\n    await test(`\n    if(true, {\n      print(\"good\");\n    });`, checkOut`good`, 'if')\n    // Test ifel (if condition do this; otherwise do that)\n    await test(`\n    ifel(false, {\n      print(\"bad\");\n    }, {\n      print(\"good\");\n    });`, checkOut`good`, 'ifel')\n    // Test else-code as optional argument to if\n    await test(`\n    if(false, {\n      print(\"bad\");\n    }, {\n      print(\"good\");\n    });`, checkOut`good`, 'else')\n\n    area('Logic & Comparison')\n    // Test logic operator functions\n    await test(`print(and(true, false));`, checkOut`false`, '& and')\n    await test(`print(or(true, false));`, checkOut`true`, '| or')\n    await test(`print(not(true), not(false));`, checkOut([`false`, 'true']), '! not')\n    // Test comparison operator functions\n    await test(`print(eq(10, 20), eq(45, 45));`, checkOut([`false`, `true`]), '= eq')\n    await test(`print(lt(10, 20), lt(70, 30), lt(45, 45));`, checkOut([`true`, `false`, `false`]), '< lt')\n    await test(`print(gt(10, 20), gt(70, 30), gt(45, 45));`, checkOut([`false`, `true`, `false`]), '> gt')\n\n    area('Surround Functions')\n    await test(`print((true and false), (true & true), (99 + 1), (1 - 1), (20 > 1))`, checkOut([\n      `false`,\n      `true`,\n      `100`,\n      `0`,\n      `true`\n    ]), 'basic usage')\n    await test(`print(('this' concat 'is' 'awesome'))`, checkOut`thisisawesome`, 'tertiary argument')\n\n    area('Variables')\n    await test(`foo => 'bar'; print(foo);`, checkOut`bar`, 'assigning & accessing')\n     await test(`foo => 'bar'; foo -> 'baz'; print(foo);`, checkOut`baz`, 'changing')\n\n  } catch (error) {\n    console.log = oldLog\n    console.log('\\x1b[31m[Errored!]\\x1b[0m Error in JS:')\n    console.error(error)\n  }\n  console.log('\\n');\n  console.timeEnd('Total tests time')\n  console.log(chalk.bold(`${passed}/${tests} tests passed.`))\n\n  if(passed < tests) process.exit(1)\n}())\n"],"sourceRoot":"/source/"}