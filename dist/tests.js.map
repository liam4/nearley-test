{"version":3,"sources":["tests.js"],"names":[],"mappings":"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","file":"tests.js","sourcesContent":["'use strict'\n\nrequire('string.prototype.repeat')\n\nconst equal = require('deep-equal')\nconst chalk = require('chalk')\nconst run = require('../req.js')\n\nmodule.exports = function doTests() {\n  const oldLog = console.log\n\n  let passed = 0\n  let tests = 0\n\n  const area = function(title) {\n    console.log('\\n   ' + chalk.bold(title) + ' ' + '-'.repeat(30 - title.length))\n  }\n\n  const test = function(code, assume, title) {\n    title = (title || code).toLowerCase()\n    tests++\n    const out = []\n    console.log = function(...args) {\n      out.push(args)\n    }\n    chalk.enabled = false\n    const promise = run(code, __dirname, true)\n    promise.then(function() {\n      chalk.enabled = true\n      console.log = oldLog\n      if (!assume(out)) {\n        oldLog(chalk.red(' ✗ ' + (title)))\n        oldLog(out)\n      } else {\n        passed++\n        oldLog(chalk.green(' ✓ ' + (title)))\n      }\n    })\n    promise.catch((e) => {\n      console.log = oldLog\n      console.error(e)\n    })\n    return promise\n  }\n\n  const checkOut = function(compare) {\n    // this should be called like this:\n    // test(code, checkOut`compareThis`)\n    // or like this:\n    // test(code, checkOut(compareThese))\n\n    return function(result) {\n      return equal(result[0], compare)\n    }\n  }\n\n  console.time('Total tests time')\n  return (async function() {\n    try {\n      area('Print')\n      // Test print output\n      await test(`print(\"hello!\");`, checkOut`hello!`, 'basic usage')\n      // Test print with multiple arguments\n      await test(`print(\"hello\", \"world\");`, checkOut([`hello`, `world`]), 'Multiple Arguments')\n      await test(`print({}, 123.456);`, checkOut([`function`, `123.456`]), 'Types')\n\n      /* Commented this out. It works because of this grammar definition:\n       * _Program -> ...\n       *           | ...\n       *           | Command\n       * So a program can be a single command -- that's why this works.\n       */\n      /*\n      try {\n        // WHY IS THIS WORKING!?!?!?!?!?!??\n        test('print(\"hello! this should not work!\")\\n', checkOut`hello! this should not work!`)\n      } catch (err) {\n        console.log('Newline as separator doesn\\'t work, but it hasn\\'t been' +\n                    'implemented yet so that\\'s okay.')\n      }\n      */\n      // Test single quoted string\n      area('Strings')\n      await test(`print('single quoted');`, checkOut`single quoted`, 'Single Quotes')\n      await test(`print(concat(\"foo\", \"bar\"));`, checkOut`foobar`, 'Double Quotes')\n\n      area('String Escapes')\n      await test(`print('single quoted \\\\'escape');`, checkOut`single quoted 'escape`, 'Single Quotes')\n      await test(`print(\"double quoted \\\\\"escape\");`, checkOut`double quoted \"escape`, 'Double Quotes')\n      await test(`print('newline\\\\\\nescape');`, checkOut`newline\\nescape`, 'Newline')\n      await test(`print('escape \\\\\\\\escape');`, checkOut`escape \\\\escape`, 'Backslash')\n      await test(`print('\\\\'single\\\\' and \\\\\"double\\\\\"')`, checkOut`'single' and \"double\"`, 'Single & Double Quotes')\n\n      area('Math')\n      // Test basic math operator functions\n      await test(`print(+(3, 4));`, checkOut`7`, '+ add')\n      await test(`print(-(3, 4));`, checkOut`-1`, '- subtract')\n      await test(`print(*(3, 4));`, checkOut`12`, '* multiply')\n      await test(`print(/(3, 4));`, checkOut`0.75`, '/ divide')\n      // Test decimals\n      await test(`print(+(1.25, 1.755));`, checkOut`3.005`, '  decimals')\n\n      area('Conditionals')\n      // Test basic if\n      await test(`\n      if(true, {\n        print(\"good\");\n      });`, checkOut`good`, 'if')\n      // Test ifel (if condition do this; otherwise do that)\n      await test(`\n      ifel(false, {\n        print(\"bad\");\n      }, {\n        print(\"good\");\n      });`, checkOut`good`, 'ifel')\n      // Test else-code as optional argument to if\n      await test(`\n      if(false, {\n        print(\"bad\");\n      }, {\n        print(\"good\");\n      });`, checkOut`good`, 'else')\n\n      area('Logic & Comparison')\n      // Test logic operator functions\n      await test(`print(and(true, false));`, checkOut`false`, '& and')\n      await test(`print(or(true, false));`, checkOut`true`, '| or')\n      await test(`print(not(true), not(false));`, checkOut([`false`, 'true']), '! not')\n      // Test comparison operator functions\n      await test(`print(eq(10, 20), eq(45, 45));`, checkOut([`false`, `true`]), '= eq')\n      await test(`print(lt(10, 20), lt(70, 30), lt(45, 45));`, checkOut([`true`, `false`, `false`]), '< lt')\n      await test(`print(gt(10, 20), gt(70, 30), gt(45, 45));`, checkOut([`false`, `true`, `false`]), '> gt')\n\n      area('Surround Functions')\n      await test(`print((true and false), (true & true), (99 + 1), (1 - 1), (20 > 1))`, checkOut([\n        `false`,\n        `true`,\n        `100`,\n        `0`,\n        `true`\n      ]), 'basic usage')\n      await test(`print(('this' concat 'is' 'awesome'))`, checkOut`thisisawesome`, 'tertiary argument')\n\n      area('Variables')\n      await test(`foo => 'bar'; print(foo);`, checkOut`bar`, 'assigning & accessing')\n      await test(`foo => 'bar'; foo -> 'baz'; print(foo);`, checkOut`baz`, 'changing')\n\n    } catch (error) {\n      console.log = oldLog\n      console.log('\\x1b[31m[Errored!]\\x1b[0m Error in JS:')\n      console.error(error.stack)\n      process.exit(1)\n    }\n    console.log('\\n');\n    console.timeEnd('Total tests time')\n    console.log(chalk.bold(`${passed}/${tests} tests passed.`))\n\n    if(passed < tests) process.exit(1)\n  }())\n}\n"],"sourceRoot":"/source/"}